args <- commandArgs()

Con      <- sub('--ConName=', '', args[grep('--ConName=', args)])
Exp      <- sub('--ExpName=', '', args[grep('--ExpName=', args)])
adjp     <- as.numeric(sub('--adjp=', '', args[grep('--adjp=', args)]))
FC       <- sub('--FC=', '', args[grep('--FC=', args)])
upCol    <- sub('--upCol=', '', args[grep('--upCol=', args)])
downCol  <- sub('--downCol=', '', args[grep('--downCol=', args)])
ncCol    <- sub('--ncCol=', '', args[grep('--ncCol=', args)])
tab      <- sub('--table=', '', args[grep('--table=', args)])
rpmNorm  <- sub('--rpmNorm=', '', args[grep('--rpmNorm=', args)])
calcCorr <- sub('--calcCorr=', '', args[grep('--rpmNorm=', args)])

if (identical(rpmNorm,character(0))){
    rpmNorm <- 1
}else{
    rpmNorm <- as.numeric(rpmNorm)
}

## default is not to calcualte correlation unless specified
if (identical(calcCorr,character(0))){
    calcCorr <- 0
}else{
    calcCorr <- as.numeric(calcCorr)
}

if (identical(FC,character(0))){
   FC <- 1
}else{
    FC <- as.numeric(FC)
}

## Column names with hypens are automatically changed to periods
## check for hyphens in Con and Exp
if(length(grep("", Con))==1){
    Con <- gsub("-",".",Con)
}

if(length(grep("", Exp))==1){
    Exp <- gsub("-",".",Exp)
}

########
## debug
########
#setwd("/groups/stark/woodfin/analysis/starrseq/human/20170418")
#Con <- "NIH-3T3_ORI_noinh_6h_20170412.all"
#Exp <- "NIH-3T3_ORI_PKRi1uM_TBKi1uM_6h_20170412.all"
#tab <- "tables/NIH-3T3_ORI_PKRi1uM_TBKi1uM_6h_20170412.all_vs_NIH-3T3_ORI_noinh_6h_20170412.all.phyper.txt"
#upCol <- "#DC143C60"
#downCol <- "#00FFFF60"
#ncCol <- "#00000060"
#FC <- 1.5
#adjp <- 0.001
#rpmNorm <- 0

## make plot directory
Dir <- "plots/"
if(!(file.exists(Dir))) {
    dir.create(Dir,FALSE,TRUE)  
}

scatterPlots <- function(dataTable){
    ## read in table using existing column names
    df <- read.table(dataTable, sep='\t', header=TRUE)
    ##-----------------Corr plot---------------##
    down <- df$p.under.adj < adjp & df$log2FC <= -log2(FC)
    up <- df$p.over.adj < adjp & df$log2FC >= log2(FC)
    ## set axis min and max
    if(rpmNorm==1){
        MINs <- min(apply(df[,grep(".cpm$", names(df))],2,  function(x) floor(log10(min(x[x>0])))))
        MAXs <- max(apply(df[,grep(".cpm$", names(df))],2,  function(x) ceiling(log10(max(x)))))
    }else{
        MINs <- min(apply(df[,grep(paste0(Con,"|",Exp), names(df))],2,  function(x) floor(log10(min(x[x>0])))))
        MAXs <- max(apply(df[,grep(paste0(Con,"|",Exp), names(df))],2,  function(x) ceiling(log10(max(x)))))
        names(df)[grep(paste0(Con,"|",Exp), names(df))] <- sub("$", ".cpm", names(df[,grep(paste0(Con,"|",Exp), names(df))]))
    }
    ## make plot
    pdf(paste(Dir, paste(Con,"vs", Exp, sep="_"), ".scatterPlot.pdf", sep=""),height=5,width=5)
    par(mar=c(5,5,5,5))
    plot(x=log10(df[,paste(Con,"cpm", sep=".")])
          ,y=log10(df[,paste(Exp,"cpm", sep=".")])
          ,col=ncCol
          ,pch=19
          ,cex=1
          ,xlim=c(MINs, MAXs)
          ,ylim=c(MINs, MAXs)
          ,main=gsub("_rep[0-9]|_Rep[0-9]", "",gsub(".all", "", paste(Exp, Con, sep="\nvs\n")))
          ,ylab=paste0("log2(", sub(".all", "", Exp), ")") 
          ,xlab=paste0("log2(", sub(".all", "", Con), ")") 
        ,cex.lab=1, cex.axis=1.1, cex.main=1, cex.sub=1)
    ## highlight dge
    points(log10(df[up,paste(Con,"cpm", sep=".")]), log10(df[up,paste(Exp,"cpm", sep=".")]), col=upCol, pch=19,cex=1)
    points(log10(df[down,paste(Con,"cpm", sep=".")]), log10(df[down,paste(Exp,"cpm", sep=".")]), col=downCol, pch=19,cex=1)
    ## total dge with cutoffs
    legend("bottomright", c(paste(sum(up), "FC >=", FC)
                           ,paste(sum(down), "FC <=", FC)
                           ,paste(nrow(df)-sum(up)-sum(down), "no change")
                            ),
           pch=c(19,19,19), col=c(upCol,downCol,ncCol),cex=0.8,title=paste("adjp < ",adjp))
    ## add corr values
    if(calcCorr > 0){
        legend("topleft", title="PCC", legend= round(cor(df[,paste(Con,"cpm", sep=".")],df[,paste(Exp,"cpm", sep=".")]), 4), cex=1)
    }
    abline(a=0,b=1, lty=2, col="grey70")
    dev.off()    
}

scatterPlots(dataTable=tab)
